package compilateurYal.yal.analyse ;

import java.util.*;
import compilateurYal.yal.arbre.* ;
import compilateurYal.yal.arbre.expressions.* ;
import compilateurYal.yal.arbre.instructions.* ;
import compilateurYal.yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, ENTIER, EGALE;
terminal String    IDF, CSTENTIERE ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, INST, LDECL, DECL_VAR, ECR, AFFECT ;
non terminal Expression EXP ;


/* -----------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     PROGRAMME  IDF  DEBUT  LDECL:ld  LINST:li  FIN
                {: Programme p = new Programme (ldleft+1);
                    p.ajouterBlocDeDeclarations(ld);
                    p.ajouterBlocDInstruction(li);
                    RESULT = p ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;
LDECL   ::=     LDECL:ld DECL_VAR:dv
                {: ((BlocDeDeclarations)ld).ajouter(dv);
                    RESULT = ld; :}

        |       DECL_VAR:dv
                {:  BlocDeDeclarations b =  new BlocDeDeclarations(dvleft + 1);
                    b.ajouter(dv);
                    RESULT = b; :}
                ;

INST    ::=     ECR:e
                {: RESULT = e; :}

        |       AFFECT:a
                {: RESULT = a; :}
                ;

ECR     ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
                ;

AFFECT  ::=     IDF:i EGALE EXP:e POINTVIRGULE
                {: RESULT = new Affectation( new Idf(i, ileft + 1), e, ileft+1); :}
                ;

DECL_VAR    ::=     ENTIER IDF:i POINTVIRGULE
                {: RESULT = new Declaration( new Idf(i, ileft + 1), ileft + 1 ); :}
                ;

EXP    ::=     CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
                ;
